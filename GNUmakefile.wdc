# Path to the source files.
VPATH := .

# We use boost 1.67.
# Set the BOOST_ROOT environment variable to point to the base install
# location of the Boost Libraries
BOOST_ROOT := /wdc/apps/utilities/boost-1.67
BOOST_DIR := $(BOOST_ROOT)

# For Various Installation types of Boost Library
BOOST_INC := $(BOOST_DIR) $(BOOST_DIR)/include

# These boost libraries must be compiled with c++14 or later.
BOOST_LIB_DIR := $(wildcard $(BOOST_DIR)/stage/lib $(BOOST_DIR)/lib)

# Specify only the basename of the Boost libraries
BOOST_LIBS := boost_program_options

# Add External Library location paths here
LINK_DIRS := $(addprefix -L,$(BOOST_LIB_DIR))

# Generating the Linker options for dependent libraries
LINK_LIBS := $(addprefix $(BOOST_LIB_DIR)/lib, $(addsuffix .a, $(BOOST_LIBS))) \
          -lpthread -lz 

ifeq ($(shell uname -s),Linux)
  LINK_LIBS += -lstdc++fs -Wl,-rpath=$$LD_LIBRARY_PATH
endif

# For out of dbg/opt build
RM := rm -rf

# Optimization flags.  Use -g for debug.
OFLAGS := -O3 -g

# Debug flags
DFLAGS := -g

# Command to compile .cpp files.
override CXXFLAGS += -MMD -MP -mfma -std=c++17 $(OFLAGS) -fPIC -pedantic -Wall -Wextra

# Pre-processor flags
override CPPFLAGS += $(addprefix -isystem ,$(BOOST_INC)) -I$(VPATH)

# Compile optimized code in opt directory.
opt:
	mkdir -p opt
	$(MAKE) -C opt -f ../GNUmakefile.wdc VPATH=.. whisper

# Compile debug code in dbg directory.
dbg:
	mkdir -p dbg
	$(MAKE) -C dbg -f ../GNUmakefile.wdc OFLAGS="$(DFLAGS)" VPATH=.. whisper

# Main target.
whisper: whisper.o librvcore.a
	$(CXX) -o $@ $^ $(LINK_DIRS) $(LINK_LIBS)

# List of CPP source files needed for librvcore.a
RVCORE_SRCS := IntRegs.cpp CsRegs.cpp FpRegs.cpp instforms.cpp Memory.cpp
RVCORE_SRCS += Hart.cpp InstEntry.cpp Triggers.cpp PerfRegs.cpp gdb.cpp
RVCORE_SRCS += HartConfig.cpp Server.cpp Interactive.cpp decode.cpp disas.cpp
RVCORE_SRCS += Syscall.cpp PmaManager.cpp DecodedInst.cpp snapshot.cpp
RVCORE_SRCS += PmpManager.cpp VirtMem.cpp Core.cpp System.cpp Cache.cpp
RVCORE_SRCS += Tlb.cpp VecRegs.cpp vector.cpp wideint.cpp

# List of All CPP source files for the project
SRCS += $(RVCORE_SRCS) whisper.cpp

# List of all object files for the project
OBJS := $(SRCS:%.cpp=%.o)

# List of all auto-genreated dependency files.
DEPS_FILES := $(OBJS:.o=.d)

# Include Generated Dependency files if available.
-include $(DEPS_FILES)

# Object files needed for librvcore.a
RVCORE_OBJS := $(RVCORE_SRCS:%.cpp=%.o)

librvcore.a: $(RVCORE_OBJS)
	$(AR) cr $@ $^

clean-dbg:
	cd dbg; $(RM) whisper $(OBJS) librvcore.a $(DEPS_FILES)

clean-opt:
	cd opt; $(RM) whisper $(OBJS) librvcore.a $(DEPS_FILES)

clean: clean-dbg clean-opt
	@ :

help:
	@echo "Possible targets: opt dbg clean clean-dbg clean-opt"

.PHONY: install clean-dbg clean-opt clean help opt dbg
